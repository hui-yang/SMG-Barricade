angular.module("myApp",[]).factory("gameLogic",function(){"use strict";function a(){return[["","","","","","","","","W","","","","","","","",""],["0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0"],["0","","","","","","","","","","","","","","","","0"],["0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0"],["","","","","","","","","1","","","","","","","",""],["","","","","","","0","0","1","0","0","","","","","",""],["","","","","","","0","","","","0","","","","","",""],["","","","","0","0","1","0","0","0","1","0","0","","","",""],["","","","","0","","","","","","","","0","","","",""],["","","0","0","0","0","0","0","0","0","0","0","0","0","0","",""],["","","0","","","","0","","","","0","","","","0","",""],["1","0","0","0","1","0","0","0","1","0","0","0","1","0","0","0","1"],["0","","","","0","","","","0","","","","0","","","","0"],["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],["","R","R","R","","G","G","G","","","","","","","","",""],["","R","","R","","G","","G","","","","","","","","",""]]}function b(a){return a[0][8]}function c(a,b,d,e,f,g){if(0===b)return[[d,e]];if("1"===a[d][e])return[];var h=[],i=[],j=[],k=[],l=[];return d-1>=0&&d-1!==f&&""!==a[d-1][e]&&(j=c(a,b-1,d-1,e,d,e)),13>=d+1&&d+1!==f&&""!==a[d+1][e]&&(k=c(a,b-1,d+1,e,d,e)),e-1>=0&&e-1!==g&&""!==a[d][e-1]&&(h=c(a,b-1,d,e-1,d,e)),16>=e+1&&e+1!==g&&""!==a[d][e+1]&&(i=c(a,b-1,d,e+1,d,e)),l=h.concat(i,j,k)}function d(a,b,d,e,f,g){f>=14&&(f=13,g=4*Math.floor(g/4)+2,b-=1);var h,i=c(a,b,f,g,-1,-1);for(h=0;h<i.length;h+=1)if(d===i[h][0]&&e===i[h][1])return!0;return!1}function e(a,b){var c,d="R"===b?0:"G"===b?1:"Y"===b?2:3,e=15,f=4*d+1;if("0"===a[e][f])return[e,f];if("0"===a[e][f+2])return[e,f+2];for(e-=1,c=f+3,e;c>f;f+=1)if("0"===a[e][f])return[e,f];throw new Error("Possible cheating on the number of the pawns")}function f(c,f,g,h,i,j,k){void 0===c&&(c=a());var l,m,n,o,p,q=0===k?"R":"G";if(n=b(c),"W"!==n&&"1"!==n)throw new Error("Can only make a move if the game is not over!");if(c[i][j]!==q)throw new Error("One can only move his own pawn!");if(c[g][h]===q)throw new Error("One cannot arrive on a place with his own pawn!");if(!d(c,f,g,h,i,j))throw new Error("One cannot go through a barricade or move steps different from the dice value!",f,g,h,i,j);return l=angular.copy(c),l[i][j]="0",l[g][h]=q,"0"===c[g][h]||"W"===c[g][h]?(n=b(l),m="W"!==n&&"1"!==n?{endMatch:{endMatchScores:"R"===n?[1,0]:[0,1]}}:{setTurn:{turnIndex:1-k}}):"1"===c[g][h]?(n=b(l),m="W"!==n&&"1"!==n?{endMatch:{endMatchScores:"R"===n?[1,0]:[0,1]}}:{setTurn:{turnIndex:k}}):(o=c[g][h],p=e(c,o),l[p[0]][p[1]]=o,m={setTurn:{turnIndex:1-k}}),[m,{set:{key:"type",value:"normal"}},{set:{key:"board",value:l}},{set:{key:"delta",value:{to_row:g,to_col:h,from_row:i,from_col:j}}},{set:{key:"dice",value:f}}]}function g(a,b,c,d){if(void 0===a)throw new Error("Cannot place barricade");if("0"!==a[b][c])throw new Error("One can only place barricade at an empty place!");var e=angular.copy(a);return e[b][c]="1",[{setTurn:{turnIndex:1-d}},{set:{key:"type",value:"barricade"}},{set:{key:"board",value:e}},{set:{key:"delta",value:{to_row:b,to_col:c}}},{set:{key:"dice",value:-1}}]}function h(a,b,c,d,e,h,i,j){return"normal"===b?f(a,c,d,e,h,i,j):g(a,d,e,j)}function i(a,b){var c=[{setTurn:{turnIndex:b}},{set:{key:"type",value:"dice"}}];return void 0===a&&(a=null),c.push({setRandomInteger:{key:"dice",from:1,to:7}}),c}function j(b,c,d){return void 0===b&&(b=a()),[{setTurn:{turnIndex:1-d}},{set:{key:"type",value:"normal"}},{set:{key:"board",value:b}},{set:{key:"delta",value:{}}},{set:{key:"dice",value:c}}]}function k(a){var b,c,d,e,f,g,k,l,m,n=a.move,o=a.turnIndexBeforeMove,p=a.stateBeforeMove;try{if(b=n[1].set.value,"dice"===b){if(c=p.dice,d=i(c,o),!angular.equals(n,d))return!1}else if(e=n[3].set.value,c=n[4].set.value,f=p.board,"normal"===b&&0===Object.keys(e).length?d=j(f,c,o):(g=e.to_row,k=e.to_col,l=e.from_row,m=e.from_col,d=h(f,b,c,g,k,l,m,o)),!angular.equals(n,d))return!1}catch(q){return!1}return!0}function l(a,b,d,e){var f,g,k,l,m,n=0===e?"R":"G";if("normal"===b){for(f=0;16>f;f+=1)for(g=0;17>g;g+=1)if(a[f][g]===n){if(f>=14?(k=13,l=4*Math.floor(g/4)+2,m=c(a,d-1,k,l,-1,-1)):m=c(a,d,f,g,-1,-1),0!==m.length)return h(a,"normal",d,m[0][0],m[0][1],f,g,e);if(f>=14)break}return j(a,d,e)}if("barricade"!==b)return i(d,e);for(f=13;f>0;f-=1)for(g=0;17>g;g+=1)if("0"===a[f][g])return h(a,"barricade",d,f,g,-1,-1,e)}return{getInitialBoard:a,createMove:h,createDiceMove:i,createPassMove:j,isMoveOk:k,getRandomPossibleMove:l}}),angular.module("myApp").controller("Ctrl",["$scope","$log","$timeout","gameService","stateService","gameLogic","resizeGameAreaService",function(a,b,c,d,e,f,g){"use strict";function h(){d.makeMove(f.getRandomPossibleMove(a.board,"normal",a.dice,a.turnIndex))}function i(){d.makeMove(f.getRandomPossibleMove(a.board,"barricade",-1,a.turnIndex))}function j(){b.info(["Dice roll for",a.turnIndex]),d.makeMove(f.createDiceMove(a.dice,a.turnIndex))}function k(d){var e=d.stateAfterMove.type;a.board=d.stateAfterMove.board,a.delta=d.stateAfterMove.delta,a.dice=d.stateAfterMove.dice,null!==a.dice&&b.info(["Dice value ",a.dice]),void 0===a.board&&(b.info(["Initializing"]),a.board=f.getInitialBoard()),a.isYourTurn=d.turnIndexAfterMove>=0&&d.yourPlayerIndex===d.turnIndexAfterMove,a.turnIndex=d.turnIndexAfterMove,d.turnIndexBeforeMove!==d.turnIndexAfterMove?(b.info(["Change player..."]),a.dice=null,a.typeExpected="dice"):(b.info(["Player continues..."]),a.typeExpected="normal"===e?"barricade":"normal",b.info(["Player continues...",a.typeExpected])),a.isYourTurn&&""===d.playersInfo[d.yourPlayerIndex].playerId?(b.info(["Computer turn"]),a.isYourTurn=!1,a.dice?"normal"===a.typeExpected?c(h,500):"barricade"===a.typeExpected&&c(i,500):c(j,500)):a.isYourTurn&&(b.info(["Player turn with dice",a.dice]),a.dice||c(j,500))}function l(a,b,c){var d=4*a+2;return 13===b&&c===d||14===b&&(c===d-1||c===d||c===d+1)||15===b&&(c===d-1||c===d+1)}g.setWidthToHeight(1.0625),window.e2e_test_stateService=e;var m=null,n=null;a.cellClicked=function(c,e){if("?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(!a.isYourTurn)return void b.info(["Wait until your turn"]);if(!a.dice)return void b.info(["Wait until dice rolls"]);if("normal"===a.typeExpected){if(b.info(["Make a normal move:"]),null===m||null===n)return void(a.shouldShowImage(c,e)&&"W"!==a.board[c][e]&&"0"!==a.board[c][e]&&(m=c,n=e,b.info(["Choose a pawn:",c,e])));try{a.isYourTurn=!1,b.info(["Choose a destination",c,e]),d.makeMove(f.createMove(a.board,"normal",a.dice,c,e,m,n,a.turnIndex)),m=null,n=null}catch(g){return b.info(["Illegal move to ",c,e," from ",m,n]),a.isYourTurn=!0,m=null,void(n=null)}}else if("barricade"===a.typeExpected){b.info(["Place a barricade"]),(null===m||null===n)&&(b.info(["Place a barricade at:",c,e]),m=null,n=null);try{a.isYourTurn=!1,b.info(["Choose a position",c,e]),d.makeMove(f.createMove(a.board,"barricade",a.dice,c,e,-1,-1,a.turnIndex))}catch(g){return b.info(["Illegal to place a barricade at:",c,e]),void(a.isYourTurn=!0)}}},a.passMove=function(){if("?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(!a.isYourTurn)return void b.info(["Wait until your turn"]);if(!a.dice)return void b.info(["Wait until dice rolls"]);if("normal"===a.typeExpected)try{a.isYourTurn=!1,d.makeMove(f.createPassMove(a.board,a.dice,a.turnIndex))}catch(c){return void b.info(["Illegal pass move"])}},a.shouldShowImage=function(b,c){var d=a.board[b][c];return""!==d},a.isWinSpot=function(b,c){return"W"===a.board[b][c]},a.isPieceR=function(b,c){return"R"===a.board[b][c]},a.isPieceG=function(b,c){return"G"===a.board[b][c]},a.isPieceB=function(b,c){return"B"===a.board[b][c]},a.isPieceY=function(b,c){return"Y"===a.board[b][c]},a.isBarricade=function(b,c){return"1"===a.board[b][c]},a.isEmptySpot=function(b,c){return"0"===a.board[b][c]},a.isRedStart=function(a,b){return l(0,a,b)},a.isGreenStart=function(a,b){return l(1,a,b)},a.isYellowStart=function(a,b){return l(2,a,b)},a.isBlueStart=function(a,b){return l(3,a,b)},a.isNormalSpot=function(b,c){return!(a.isWinSpot(b,c)||a.isRedStart(b,c)||a.isGreenStart(b,c)||a.isYellowStart(b,c)||a.isBlueStart(b,c))},a.getDiceSrc=function(){switch(a.dice){case 1:return"imgs/1.png";case 2:return"imgs/2.png";case 3:return"imgs/3.png";case 4:return"imgs/4.png";case 5:return"imgs/5.png";case 6:return"imgs/6.png";default:return"imgs/6.png"}},a.shouldSlowlyAppear=function(b,c){return void 0!==a.delta&&a.delta.row===b&&a.delta.col===c},d.setGame({gameDeveloperEmail:"hy821@nyu.edu",minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:f.isMoveOk,updateUI:k})}]);
//# sourceMappingURL=everything.min.js.map