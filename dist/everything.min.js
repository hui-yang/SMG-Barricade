angular.module("myApp",[]).factory("gameLogic",function(){"use strict";function a(){return[["","","","","","","","","W","","","","","","","",""],["0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0"],["0","","","","","","","","","","","","","","","","0"],["0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0"],["","","","","","","","","1","","","","","","","",""],["","","","","","","0","0","1","0","0","","","","","",""],["","","","","","","0","","","","0","","","","","",""],["","","","","0","0","1","0","0","0","1","0","0","","","",""],["","","","","0","","","","","","","","0","","","",""],["","","0","0","0","0","0","0","0","0","0","0","0","0","0","",""],["","","0","","","","0","","","","0","","","","0","",""],["1","0","0","0","1","0","0","0","1","0","0","0","1","0","0","0","1"],["0","","","","0","","","","0","","","","0","","","","0"],["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],["","R","R","R","","G","G","G","","","","","","","","",""],["","R","","R","","G","","G","","","","","","","","",""]]}function b(a){return a[0][8]}function c(a,b,d,e,f,g){if(0===b)return[[d,e]];if("1"===a[d][e])return[];var h=[],i=[],j=[],k=[],l=[];return d-1>=0&&d-1!==f&&""!==a[d-1][e]&&(j=c(a,b-1,d-1,e,d,e)),13>=d+1&&d+1!==f&&""!==a[d+1][e]&&(k=c(a,b-1,d+1,e,d,e)),e-1>=0&&e-1!==g&&""!==a[d][e-1]&&(h=c(a,b-1,d,e-1,d,e)),16>=e+1&&e+1!==g&&""!==a[d][e+1]&&(i=c(a,b-1,d,e+1,d,e)),l=h.concat(i,j,k)}function d(a,b,d,e,f,g){f>=14&&(f=13,g=4*Math.floor(g/4)+2,b-=1);var h,i=c(a,b,f,g,-1,-1);for(h=0;h<i.length;h+=1)if(d===i[h][0]&&e===i[h][1])return!0;return!1}function e(a,b){var c,d="R"===b?0:"G"===b?1:"Y"===b?2:3,e=15,f=4*d+1;if("0"===a[e][f])return[e,f];if("0"===a[e][f+2])return[e,f+2];for(e-=1,c=f+3,e;c>f;f+=1)if("0"===a[e][f])return[e,f];throw new Error("Possible cheating on the number of the pawns")}function f(c,f,g,h,i,j,k){void 0===c&&(c=a());var l,m,n,o,p,q=0===k?"R":"G";if(n=b(c),"W"!==n&&"1"!==n)throw new Error("Can only make a move if the game is not over!");if(c[i][j]!==q)throw new Error("One can only move his own pawn!");if(c[g][h]===q)throw new Error("One cannot arrive on a place with his own pawn!");if(!d(c,f,g,h,i,j))throw new Error("One cannot go through a barricade or move steps different from the dice value!",f,g,h,i,j);return l=angular.copy(c),l[i][j]="0",l[g][h]=q,"0"===c[g][h]||"W"===c[g][h]?(n=b(l),m="W"!==n&&"1"!==n?{endMatch:{endMatchScores:"R"===n?[1,0]:[0,1]}}:{setTurn:{turnIndex:1-k}}):"1"===c[g][h]?(n=b(l),m="W"!==n&&"1"!==n?{endMatch:{endMatchScores:"R"===n?[1,0]:[0,1]}}:{setTurn:{turnIndex:k}}):(o=c[g][h],p=e(c,o),l[p[0]][p[1]]=o,m={setTurn:{turnIndex:1-k}}),[m,{set:{key:"type",value:"normal"}},{set:{key:"board",value:l}},{set:{key:"delta",value:{to_row:g,to_col:h,from_row:i,from_col:j}}},{set:{key:"dice",value:f}}]}function g(a,b,c,d){if(void 0===a)throw new Error("Cannot place barricade");if("0"!==a[b][c])throw new Error("One can only place barricade at an empty place!");var e=angular.copy(a);return e[b][c]="1",[{setTurn:{turnIndex:1-d}},{set:{key:"type",value:"barricade"}},{set:{key:"board",value:e}},{set:{key:"delta",value:{to_row:b,to_col:c}}},{set:{key:"dice",value:-1}}]}function h(a,b,c,d,e,h,i,j){return"normal"===b?f(a,c,d,e,h,i,j):g(a,d,e,j)}function i(a,b){var c=[{setTurn:{turnIndex:b}},{set:{key:"type",value:"dice"}}];return void 0===a&&(a=null),c.push({setRandomInteger:{key:"dice",from:1,to:7}}),c}function j(b,c,d){return void 0===b&&(b=a()),[{setTurn:{turnIndex:1-d}},{set:{key:"type",value:"normal"}},{set:{key:"board",value:b}},{set:{key:"delta",value:{}}},{set:{key:"dice",value:c}}]}function k(a){var b,c,d,e,f,g,k,l,m,n=a.move,o=a.turnIndexBeforeMove,p=a.stateBeforeMove;try{if(b=n[1].set.value,"dice"===b){if(c=p.dice,d=i(c,o),!angular.equals(n,d))return!1}else if(e=n[3].set.value,c=n[4].set.value,f=p.board,"normal"===b&&0===Object.keys(e).length?d=j(f,c,o):(g=e.to_row,k=e.to_col,l=e.from_row,m=e.from_col,d=h(f,b,c,g,k,l,m,o)),!angular.equals(n,d))return!1}catch(q){return!1}return!0}function l(a,b,d,e){var f,g,k,l,m,n=0===e?"R":"G";if("normal"===b){for(f=0;16>f;f+=1)for(g=0;17>g;g+=1)if(a[f][g]===n){if(f>=14?(k=13,l=4*Math.floor(g/4)+2,m=c(a,d-1,k,l,-1,-1)):m=c(a,d,f,g,-1,-1),0!==m.length)return h(a,"normal",d,m[0][0],m[0][1],f,g,e);if(f>=14)break}return j(a,d,e)}if("barricade"!==b)return i(d,e);for(f=13;f>0;f-=1)for(g=0;17>g;g+=1)if("0"===a[f][g])return h(a,"barricade",d,f,g,-1,-1,e)}return{getInitialBoard:a,createMove:h,createDiceMove:i,createPassMove:j,isMoveOk:k,getRandomPossibleMove:l}}),angular.module("myApp").controller("Ctrl",["$scope","$log","$timeout","$rootScope","gameService","stateService","gameLogic","resizeGameAreaService",function(a,b,c,d,e,f,g,h){"use strict";function i(c,d,e){b.info([y]);var f=d-u.offsetLeft,g=e-u.offsetTop;if(0>f||0>g||f>=u.clientWidth||g>=u.clientHeight){if(!y)return;var h=l();k({top:g-h.height/2,left:f-h.width/2},a.typeExpected)}else{var i=Math.floor(w*f/u.clientWidth),j=Math.floor(v*g/u.clientHeight);if("touchstart"!==c||x||a.board[j][i]===a.myPiece&&a.isYourTurn&&"normal"===a.typeExpected&&(x={row:j,col:i},y=document.getElementById("e2e_test_piece"+a.myPiece+"_"+j+"x"+i),y.style["z-index"]=++z),!y)return void b.info(["not dragging any piece"]);if("touchend"===c){var o=x,p={row:j,col:i};n(o,p)}else k(m(j,i),a.typeExpected),b.info(["set pos "+j+" "+i])}("touchend"===c&&"barricade"!==a.typeExpected||"touchcancel"===c||"touchleave"===c)&&(k(m(x.row,x.col)),x=null,y=null)}function j(b){var c=l(),d=b.top/c.height,e=b.left/c.width;return""===a.board[d][e]}function k(a,c){var d,e=x.row,f=x.col;j(a)||(b.info(["current row col:"+e+" "+f]),d="barricade"===c?m(0,0):m(e,f),y.style.left=a.left-d.left+"px",y.style.top=a.top-d.top+"px",b.info(["piece "+y.style.left+" "+y.style.top]))}function l(){return{width:u.clientWidth/w,height:u.clientHeight/v}}function m(a,b){var c=l();return{top:a*c.height,left:b*c.width}}function n(c,f){b.info(a.board),d.$apply(function(){var d="Dragged piece "+c.row+"x"+c.col+" to square "+f.row+"x"+f.col;if(b.info(d),a.msg=d,a.isYourTurn){try{a.isYourTurn=!1,"normal"===a.typeExpected?("1"===a.board[f.row][f.col]&&(x={row:f.row,col:f.col},y=document.getElementById("spareBarricade"),y.style["z-index"]=0,y.style.display="inline",k(m(x.row,x.col),"barricade")),e.makeMove(g.createMove(a.board,"normal",a.dice,f.row,f.col,c.row,c.col,a.turnIndex))):(e.makeMove(g.createMove(a.board,"barricade",a.dice,f.row,f.col,-1,-1,a.turnIndex)),y.style.display="none")}catch(h){b.info(["Illegal Move"]),a.isYourTurn=!0,k(m(x.row,x.col),a.typeExpected)}b.info([y])}})}function o(a){for(var b=[],c=0;a>c;c++)b.push(c);return b}function p(){e.makeMove(g.getRandomPossibleMove(a.board,"normal",a.dice,a.turnIndex))}function q(){e.makeMove(g.getRandomPossibleMove(a.board,"barricade",-1,a.turnIndex))}function r(){e.makeMove(g.createDiceMove(a.dice,a.turnIndex))}function s(b){var d=b.stateAfterMove.type;a.board=b.stateAfterMove.board,a.delta=b.stateAfterMove.delta,a.dice=b.stateAfterMove.dice;var e;switch(b.yourPlayerIndex){case 0:e="R";break;case 1:e="G";break;case 2:e="Y";break;case 3:e="B"}a.myPiece=e,void 0===a.board&&(a.board=g.getInitialBoard()),a.isYourTurn=b.turnIndexAfterMove>=0&&b.yourPlayerIndex===b.turnIndexAfterMove,a.turnIndex=b.turnIndexAfterMove,b.turnIndexBeforeMove!==b.turnIndexAfterMove?(a.dice=null,a.typeExpected="dice"):a.typeExpected="normal"===d?"barricade":"normal",a.isYourTurn&&""===b.playersInfo[b.yourPlayerIndex].playerId?(a.isYourTurn=!1,a.dice?"normal"===a.typeExpected?c(p,500):"barricade"===a.typeExpected&&c(q,500):c(r,500)):a.isYourTurn&&(a.dice||c(r,500));var f=document.getElementById("e2e_test_dice");if("dice"===d&&(f.className="spinIn"),"dice"===a.typeExpected&&(f.className="spinOut"),"normal"===d){var h=a.delta.from_row,i=a.delta.from_col,j=a.delta.to_row,k=a.delta.to_col,l=6.25*(j-h)/100,m=5.88*(k-i)/100,n=document.getElementById("e2e_test_piece"+e+"_"+h+"x"+i);n.style='{top:"'+l+'", left:"'+m+'", position: "relative", "-webkit-animation": "moveAnimation 2s", "animation": "moveAnimation 2s"}'}}function t(a,b,c){var d=4*a+2;return 13===b&&c===d||14===b&&(c===d-1||c===d||c===d+1)||15===b&&(c===d-1||c===d+1)}var u=document.getElementById("gameArea"),v=16,w=17,x=null,y=null,z=61;window.handleDragEvent=i,h.setWidthToHeight(1.0625),a.rows=o(v),a.cols=o(w),a.rowsNum=v,a.colsNum=w,window.e2e_test_stateService=f;var A=null,B=null;a.cellClicked=function(c,d){if("?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(a.isYourTurn&&a.dice)if("normal"===a.typeExpected){if(null===A||null===B)return void(a.shouldShowImage(c,d)&&"W"!==a.board[c][d]&&"0"!==a.board[c][d]&&(A=c,B=d,b.info(["Choose a pawn:",c,d])));try{a.isYourTurn=!1,b.info(["Choose a destination",c,d]),e.makeMove(g.createMove(a.board,"normal",a.dice,c,d,A,B,a.turnIndex)),A=null,B=null}catch(f){return b.info(["Illegal move to ",c,d," from ",A,B]),a.isYourTurn=!0,A=null,void(B=null)}}else if("barricade"===a.typeExpected){(null===A||null===B)&&(b.info(["Place a barricade at:",c,d]),A=null,B=null);try{a.isYourTurn=!1,b.info(["Choose a position",c,d]),e.makeMove(g.createMove(a.board,"barricade",a.dice,c,d,-1,-1,a.turnIndex))}catch(f){return b.info(["Illegal to place a barricade at:",c,d]),void(a.isYourTurn=!0)}}},a.passMove=function(){if("?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(a.isYourTurn&&a.dice&&"normal"===a.typeExpected)try{a.isYourTurn=!1,e.makeMove(g.createPassMove(a.board,a.dice,a.turnIndex))}catch(c){return void b.info(["Illegal pass move"])}},a.shouldShowImage=function(b,c){var d=a.board[b][c];return""!==d},a.isWinSpot=function(b,c){return"W"===a.board[b][c]},a.isPieceR=function(b,c){return"R"===a.board[b][c]},a.isPieceG=function(b,c){return"G"===a.board[b][c]},a.isPieceB=function(b,c){return"B"===a.board[b][c]},a.isPieceY=function(b,c){return"Y"===a.board[b][c]},a.isBarricade=function(b,c){return"1"===a.board[b][c]},a.isEmptySpot=function(b,c){return"0"===a.board[b][c]},a.isRedStart=function(a,b){return t(0,a,b)},a.isGreenStart=function(a,b){return t(1,a,b)},a.isYellowStart=function(a,b){return t(2,a,b)},a.isBlueStart=function(a,b){return t(3,a,b)},a.isNormalSpot=function(b,c){return!(a.isWinSpot(b,c)||a.isRedStart(b,c)||a.isGreenStart(b,c)||a.isYellowStart(b,c)||a.isBlueStart(b,c))},a.getDiceSrc=function(){switch(a.dice){case 1:return"imgs/1.png";case 2:return"imgs/2.png";case 3:return"imgs/3.png";case 4:return"imgs/4.png";case 5:return"imgs/5.png";case 6:return"imgs/6.png";default:return""}},a.shouldSlowlyAppear=function(b,c){return void 0!==a.delta&&a.delta.row===b&&a.delta.col===c},e.setGame({gameDeveloperEmail:"hy821@nyu.edu",minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:g.isMoveOk,updateUI:s})}]);
//# sourceMappingURL=everything.min.js.map